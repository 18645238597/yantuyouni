<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-3.2.xsd
	      http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	    http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	   
	   <!-- 读取properties文件 -->
	   <context:property-placeholder location="classpath:jdbc.properties"/>
	   <!-- 配置jdcp数据源 -->
	   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
		   <property name="driverClassName" value="${jdbc.driver}"></property>
		   <property name="url" value="${jdbc.url}"></property>
		   <property name="username" value="${jdbc.username}"/>
		   <property name="password" value="${jdbc.password}"/>
		   <property name="initialSize" value="${initialSize}"/>
		   <property name="maxIdle" value="${maxIdle}"/>
		   <property name="minIdle" value="${minIdle}"/>
		   <property name="maxActive" value="${maxActive}"/>
		   <property name="maxWait" value="${maxWait}"/>
		   <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
		   <property name="removeAbandoned" value="${removeAbandoned}"/>
		   
		   <!-- sql心跳    保证连接池中的连接是真是有效的-->
		   <!--开启Evict的定时校验，循环校验  -->
		   <property name="testWhileIdle" value="true"/>
		   <!-- 定义Evict的时间间隔，单位：毫秒 -->
		   <property name="timeBetweenEvictionRunsMillis" value="60000"/>
		   <!-- 在进行borrowObject处理时，会对拿到的 连接进行校验-false-->
		   <property name="testOnBorrow" value="false"/>
		   <!-- 在进行ruturnObject处理时，会对返回的连接进行校验-false -->
		   <property name="testOnReturn" value="false"/>
		   <!-- 校验使用的sql语句，validatetionQuery，复杂的校验sql会影响性能 -->
		   <property name="validationQuery" value="select 1"/>
		   <!-- 配置每次校验连接的数量，一般等于maxActive -->
		   <property name="numTestsPerEvictionRun" value="${maxActive}"/>
	   </bean>
	   <!--==================== 配置事务=================== -->
	   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	   		<property name="dataSource" ref="dataSource"/>
	   </bean>
	   <!-- 配置mybatis的sqlSessionBean -->
	   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		   <property name="dataSource" ref="dataSource"/>
		   <property name="configLocation" value="classpath:mybatis-config.xml"></property>
	   </bean>
	   <!-- AOP事务处理 -->
	   <aop:aspectj-autoproxy/><!-- 告诉aop采用自动代理模式 -->
	   <!--proxy-target-class 属性为true 使用代理标签类 -->
	   <aop:config proxy-target-class="true">
		  <aop:pointcut expression="execution(* *com.yantu.service..*(..))" id="transServer"/>
		   <aop:advisor advice-ref="txAdvice" pointcut-ref="transServer"/>
	   </aop:config>
	   <!-- txAdvice 需要定义事务管理器，进行事务处理 -->
	   <tx:advice id="txAdvice" transaction-manager="transactionManager">
		   <tx:attributes>
		   		<tx:method name="hl*" propagation="REQUIRED" rollback-for="Exception"/>
		   </tx:attributes>
	   </tx:advice>
	   <!--mapper接口所在包名，sping会自动查找其下的mapper  -->
	   <bean class=" org.mybatis.spring.mapper.MapperScannerConfigurer">
	   		<property name="basePackage" value="com.yantu.dao"/>
	   </bean>
	   
	   <!-- redis配置 -->
	 <!--   <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	   		<property name="maxActive" value="90"/>
	   		<property name="maxIdle" value="5"/>
	   		<property name="maxWait" value="1000"/>
	   		<property name="testOnBorrow" value="true"/>
	   </bean>
	   <bean id="jedisPool" class=" redis.clients.jedis.JedisPool" destroy-method="destroy">
	   		<constructor-arg ref="jedisPoolConfig"/>
	   		<constructor-arg ref="redis服务的ip"/> 
	   </bean> -->
	   </beans>
	   